import telebot, io
from PyPDF2 import PdfReader

from utill import compare, extract_transaction_date

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
API_TOKEN = '7463369543:AAF90Ol-BYuSqV0V3F0xemdosgGAYobf4K8'

SUCCESS = "‚úÖ"
FAIL = "‚ùå"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF —Ñ–∞–π–ª, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF —Ñ–∞–π–ª–∞
@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
        if message.document.mime_type != 'application/pdf':
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
            return

        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with io.BytesIO(downloaded_file) as file:
            reader = PdfReader(file)
            pdf_metadata = reader.metadata
            version = reader.pdf_header
            pdf_text = reader.pages[0].extract_text()

        data = {
            "size": len(downloaded_file) // 1024,
            "ver": version[5:8],
            "creator": pdf_metadata.creator,
            "producer": pdf_metadata.producer,
            "creation_date": pdf_metadata.creation_date
        }
        compare_result = compare(data)

        bank_name = next(filter(lambda bank: bank[1], compare_result.items()), (None, False))[0]
        data["transaction_date"] = extract_transaction_date(pdf_text, bank_name)

        bot.reply_to(message, form_pdf_response(compare_result, data))
    except Exception as e:
        print(e)
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}.\n –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Ñ–µ–π–∫.‚ùå")


def form_compare_result(compare_result):
    return "\n".join(map(lambda bank: f"{bank[0]} {SUCCESS if bank[1] else FAIL}", compare_result.items()))


def form_pdf_response(compare_result, data):
    return (
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞:\n\n"
        f"üî∏ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ö–ë):  {data.get('size')}\n"
        f"üî∏ –í–µ—Ä—Å–∏—è PDF: {data.get('ver')}\n"
        f"üî∏ –°–æ–∑–¥–∞—Ç–µ–ª—å: {data.get('creator')}\n"
        f"üî∏ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {data.get('creation_date')}\n"
        f"üî∏ –î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data.get('transaction_date')}\n"
        f"üî∏ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {data.get('producer')}\n\n"
        f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏:\n\n"
        f"{form_compare_result(compare_result)}"
    )


bot.polling()
